name: "Continuous Deployment"

on:
  push:
    branches:
      - main

jobs:
  validation:
    uses: ./.github/workflows/fullcheck.yml
    secrets:
      API_KEY_OPEN_CAGE_DATA_GEOCODING: ${{ secrets.API_KEY_OPEN_CAGE_DATA_GEOCODING }}
      API_KEY_OPEN_CAGE_DATA_GEOSEARCH: ${{ secrets.API_KEY_OPEN_CAGE_DATA_GEOSEARCH }}
      SIRENE_BEARER_TOKEN: ${{ secrets.SIRENE_BEARER_TOKEN }}

  build-front-artefact:
    uses: ./.github/workflows/build-front-artefact.yml
    with:
      tag: "v${{ github.run_number }}"
    secrets:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

  build-back-artefact:
    uses: ./.github/workflows/build-back-artefact.yml
    with:
      tag: "v${{ github.run_number }}"

  tag:
    name: "Tag"
    uses: ./.github/workflows/ci-add-tag.yml
    with:
      tag: "v${{ github.run_number }}"

  generate-release-notes:
    name: Generate release-notes
    runs-on: ubuntu-latest
    needs: tag
    outputs:
      release-notes: ${{ steps.generate-release-notes.outputs.result }}
    steps:
      - name: Get tag of latest release
        id: get-latest-release-tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const latestRelease = await github.request(`GET /repos/${{ github.repository }}/releases/latest`)
            return latestRelease.data.tag_name
          result-encoding: string
      - name: Generate release notes from latest release
        id: generate-release-notes
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const releaseNotes = await github.request(`POST /repos/${{ github.repository }}/releases/generate-notes`, {
              tag_name: `v${{ github.run_number }}`,
              previous_tag_name: `${{steps.get-latest-release-tag.outputs.result}}` })
            return releaseNotes.data

  deploy-dev:
    name: Deploy dev
    needs: [ validation, tag, build-front-artefact, build-back-artefact, generate-release-notes ]
    uses: ./.github/workflows/deploy-to-scalingo.yml
    with:
      environment: dev
      tag: "v${{ github.run_number }}"
      version-new-features: ${{fromJson(needs.generate-release-notes.outputs.release-notes).body}}
    secrets:
      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

  run-playwright-on-dev:
    name: Run Playwright on dev
    needs: deploy-dev
    uses: ./.github/workflows/playwright-run.yml
    with:
      environment: dev
      tag: "v${{ github.run_number }}"
    secrets:
      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}

  deploy-staging:
    name: Deploy staging
    needs: [ generate-release-notes, deploy-dev ]
    uses: ./.github/workflows/deploy-to-scalingo.yml
    with:
      environment: staging
      tag: "v${{ github.run_number }}"
      version-new-features: ${{fromJson(needs.generate-release-notes.outputs.release-notes).body}}
    secrets:
      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

  deploy-prod:
    name: Deploy prod
    needs: [ generate-release-notes, deploy-staging ]
    uses: ./.github/workflows/deploy-to-scalingo.yml
    with:
      environment: prod
      tag: "v${{ github.run_number }}"
      region: "osc-secnum-fr1"
      version-new-features: ${{fromJson(needs.generate-release-notes.outputs.release-notes).body}}
    secrets:
      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

  create-release-notes:
    name: Create release notes
    runs-on: ubuntu-latest
    needs: [ generate-release-notes, deploy-prod ]
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.request(`POST /repos/${{ github.repository }}/releases`, {
              tag_name: `v${{ github.run_number }}`,
              name: `${{fromJson(needs.generate-release-notes.outputs.release-notes).name}}`,
              body: `${{fromJson(needs.generate-release-notes.outputs.release-notes).body}}`})

name: "Continuous Deployment"

on:
  push:
    branches:
      - main

jobs:
  validation:
    uses: ./.github/workflows/fullcheck.yml
    secrets:
      API_KEY_OPEN_CAGE_DATA_GEOCODING: ${{ secrets.API_KEY_OPEN_CAGE_DATA_GEOCODING }}
      API_KEY_OPEN_CAGE_DATA_GEOSEARCH: ${{ secrets.API_KEY_OPEN_CAGE_DATA_GEOSEARCH }}
      IC_ADMIN_PASSWORD: ${{ secrets.IC_ADMIN_PASSWORD }}
      IC_PASSWORD: ${{ secrets.IC_PASSWORD }}
      IC_USERNAME: ${{ secrets.IC_USERNAME }}
      SIRENE_BEARER_TOKEN: ${{ secrets.SIRENE_BEARER_TOKEN }}
      INCLUSION_CONNECT_CLIENT_SECRET: ${{ secrets.INCLUSION_CONNECT_CLIENT_SECRET }}

  build-front-artefact:
    uses: ./.github/workflows/build-front-artefact.yml
    with:
      tag: "v${{ github.run_number }}"
    secrets:
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

  build-back-artefact:
    uses: ./.github/workflows/build-back-artefact.yml
    with:
      tag: "v${{ github.run_number }}"

  tag:
    name: "Tag"
    uses: ./.github/workflows/ci-add-tag.yml
    with:
      tag: "v${{ github.run_number }}"

  deploy-dev:
    name: Deploy dev
    needs: [ validation, tag, build-front-artefact, build-back-artefact ]
    uses: ./.github/workflows/deploy-to-scalingo.yml
    with:
      environment: dev
      tag: "v${{ github.run_number }}"
      isPreRelease: true
    secrets:
      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

  run-playwright-on-dev:
    name: Run Playwright on dev
    needs: deploy-dev
    uses: ./.github/workflows/playwright-run.yml
    with:
      environment: dev
      tag: "v${{ github.run_number }}"
    secrets:
      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}
      IC_USERNAME: ${{ secrets.IC_USERNAME }}
      IC_PASSWORD: ${{ secrets.IC_PASSWORD }}
      IC_ADMIN_PASSWORD: ${{ secrets.IC_ADMIN_PASSWORD }}

  create-wip-pre-release:
    runs-on: ubuntu-latest
    needs:
      - tag
    env:
      PRE_RELEASE_TAG: v${{ github.run_number }}-rc
    steps:
      - name: "Generate release candidate on github"
        uses: softprops/action-gh-release@v2
        with:
          name: Work in progress - ${{ env.PRE_RELEASE_TAG }}
          prerelease: true
          tag_name: ${{ env.PRE_RELEASE_TAG }}
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Delete old prereleases
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const lastPreReleaseTag = '${{ env.PRE_RELEASE_TAG }}';
            const releases = await github.request(`GET /repos/${{ github.repository }}/releases`);

            const oldPrereleases = releases.data
              .filter(release => release.prerelease && release.tag_name !== lastPreReleaseTag);

            console.log(`Found ${oldPrereleases.length} old prereleases. Deleting them...`);

            for (const release of oldPrereleases) {
              console.log(`Deleting prerelease: ${release.tag_name} and the corresponding tag`);
              await github.request(`DELETE /repos/${{ github.repository }}/releases/${release.id}`);
              await github.request(`DELETE /repos/${{ github.repository }}/git/refs/tags/${release.tag_name}`);
            }

  deploy-staging:
    name: Deploy staging
    needs: [ deploy-dev ]
    uses: ./.github/workflows/deploy-to-scalingo.yml
    with:
      environment: staging
      tag: "v${{ github.run_number }}"
      isPreRelease: true
    secrets:
      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

  deploy-prod:
    name: Deploy prod
    needs: [ deploy-staging ]
    uses: ./.github/workflows/deploy-to-scalingo.yml
    with:
      environment: prod
      tag: "v${{ github.run_number }}"
      region: "osc-secnum-fr1"
      isPreRelease: false
    secrets:
      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}

  create-release-notes:
    name: Create release notes
    runs-on: ubuntu-latest
    needs: [ deploy-prod ]
    steps:
      - name: "Generate release on github"
        uses: softprops/action-gh-release@v2
        with:
          name: v${{ github.run_number }}
          tag_name: v${{ github.run_number }}
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: "Delete corresponding pre-release"
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const release = await github.request(`GET /repos/${{ github.repository }}/releases/tags/v${{ github.run_number }}-rc`);
            if (release.data && release.data.id) {
              await github.request(`DELETE /repos/${{ github.repository }}/releases/${release.data.id}`);
              await github.request(`DELETE /repos/${{ github.repository }}/git/refs/tags/${release.data.tag_name}`);
            }

name: "Review app"

on:
  pull_request:
    types:
      - opened
      - ready_for_review
      - review_requested
      - synchronize
concurrency:
  group: review-app-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  validation:
    uses: ./.github/workflows/fullcheck.yml
    secrets:
      API_KEY_OPEN_CAGE_DATA_GEOCODING: ${{ secrets.API_KEY_OPEN_CAGE_DATA_GEOCODING }}
      API_KEY_OPEN_CAGE_DATA_GEOSEARCH: ${{ secrets.API_KEY_OPEN_CAGE_DATA_GEOSEARCH }}
      IC_ADMIN_PASSWORD: ${{ secrets.IC_ADMIN_PASSWORD }}
      IC_PASSWORD: ${{ secrets.IC_PASSWORD }}
      IC_USERNAME: ${{ secrets.IC_USERNAME }}
      SIRENE_BEARER_TOKEN: ${{ secrets.SIRENE_BEARER_TOKEN }}
      INCLUSION_CONNECT_CLIENT_SECRET: ${{ secrets.INCLUSION_CONNECT_CLIENT_SECRET }}

  verify-migration-order:
    name: "Verify migration order"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get last migration file name
        id: last-migration-file
        run: |
          last_migration_file=$(ls -v ./back/src/config/pg/migrations | tail -n 1)
          echo "LAST_MIGRATION_FILE=$last_migration_file" >> "$GITHUB_OUTPUT"
      - name: Get PR migration files
        id: new-migration-files
        run: |
          git fetch origin main
          git fetch origin ${GITHUB_HEAD_REF}
          diff=$(git diff --name-only --diff-filter=A origin/main origin/${GITHUB_HEAD_REF})
          if echo "$diff" | grep -q "/migrations/"; then
            migration_files=$(echo "$diff" | grep "/migrations/")
          else
            migration_files=""
            echo "No migration files found."
          fi
          echo "NEW_MIGRATION_FILES_IN_PR=$migration_files" >> "$GITHUB_OUTPUT"
      - name: Verify if last migration file is new
        env:
          LAST_MIGRATION_FILE: ${{ steps.last-migration-file.outputs.LAST_MIGRATION_FILE }}
          NEW_MIGRATION_FILES_IN_PR: ${{ steps.new-migration-files.outputs.NEW_MIGRATION_FILES_IN_PR }}
        run: |
          echo "LAST_MIGRATION_FILE: $LAST_MIGRATION_FILE"
          echo "NEW_MIGRATION_FILES_IN_PR: $NEW_MIGRATION_FILES_IN_PR"
          if [ -n "$NEW_MIGRATION_FILES_IN_PR" ] && ! echo "$NEW_MIGRATION_FILES_IN_PR" | grep -q "$LAST_MIGRATION_FILE"; then
            echo "ERROR: there are migration conflicts."
            exit 1
          else
            echo "There is no migration conflict in this PR."
          fi

  deploy-review-app:
    if: github.event.pull_request.draft == false && github.event.pull_request.state == 'open'
    uses: ./.github/workflows/review-app-deploy.yml
    needs: validation
    with:
      pull_request_id: ${{ github.event.number }}
      run_number: ${{ github.run_number }}
    secrets:
      SCALINGO_API_TOKEN: ${{ secrets.SCALINGO_API_TOKEN }}

  run-seeds:
    needs: deploy-review-app
    runs-on: ubuntu-latest
    environment: review-app
    steps:
      - name: Install scalingo CLI
        run: |
          wget -qO- https://cli-dl.scalingo.com/install.sh | bash
          echo "$HOME/bin" >> $GITHUB_PATH
      - name: Login to scalingo
        run: scalingo login --api-token ${{ secrets.SCALINGO_API_TOKEN }}
      - name: Run DB seed
        run: scalingo --app if-dev-back-pr${{ github.event.number }} run pnpm db:seed

  notify-pr:
    if: github.event.pull_request.draft == false && github.event.pull_request.state == 'open'
    runs-on: ubuntu-latest
    needs: deploy-review-app
    steps:
      - name: Find existing notification
        uses: peter-evans/find-comment@v3
        id: find-comment
        with:
          issue-number: ${{ github.event.number }}
          body-regex: Review app:\nhttps:\/\/if-dev-front-pr
      - name: Notify PR about the webapp url
        if: steps.find-comment.outputs.comment-id == ''
        uses: thollander/actions-comment-pull-request@v2
        with:
          message: |
            Review app:
            https://if-dev-front-pr${{ github.event.number }}.osc-fr1.scalingo.io
